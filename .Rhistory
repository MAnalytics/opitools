count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#filter to remove neutral
dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive", "negative"))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment) %>%
mutate(total = sum(n)) %>%
mutate(pct=round((n/total)*100, digits=2))%>%
select(-c(total))
afinn_OSD
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#filter to remove neutral
dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive", "negative"))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment) %>%
#mutate(total = sum(n)) %>%
#mutate(pct=round((n/total)*100, digits=2))%>%
#select(-c(total))
afinn_OSD
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#filter to remove neutral
dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive", "negative"))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
afinn_OSD
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
sent_gr
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive"),
n=0)
sent_gr
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
wh
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD <- afinn_OSD %>%
mutate(total = sum(n)) %>%
mutate(pct=round((n/total)*100, digits=2))%>%
select(-c(total))
afinn_OSD
total_n <- sum(afinn_OSD$n)
PD <- afinn_OSD$n[2] - afinn_OSD$n[1]
opi_details$sentiments <- afinn_OSD
opi_details$opiscore <- paste(PD, "%", sep="")
opi_details$metric <- "Percentage Difference"
opi_details$equation <- "((#Positive - #Negative)/(#Positive + #Negative))*100"
opi_details
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD
afinn_OSD$n[2]
afinn_OSD
afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
N
PD <- P - N
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
PD <- P - N
PD
opi_details$opiscore <- paste(PD, "%", sep="")
opi_details
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
O
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#filter to remove neutral
dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive", "negative"))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment) #%>%
#mutate(total = sum(n)) %>%
#mutate(pct=round((n/total)*100, digits=2))%>%
#select(-c(total))
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD
afinn_OSD
total_n <- sum(afinn_OSD$n)
total_n
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
PD <- ((P - N)/(P + N))*100
PD
P
N
(P + N)
((P - N)/(P + N))
PD <- ((P - N)/(P + N))*100
PD
PD <- round(((P - N)/(P + N))*100,digits = 2)
PD
opi_details$sentiments <- afinn_OSD
opi_details$opiscore <- paste(PD, "%", sep="")
opi_details$metric <- "Percentage Difference"
opi_details$equation <- "((#Positive - #Negative)/(#Positive + #Negative))*100"
opi_details
afinn_OSD
afinn_OSD %>%
rename(No_of_text_record=n)
both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
N
P
afinn_OSD
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD
P - N
abs(P - N)
(P + N + O)
afinn_OSD
O
which(afinn_OSD$sentiment == "neutral")
afinn_OSD
which(afinn_OSD$sentiment == "neutral")
afinn_OSD$sentiment
afinn_OSD$sentiment == "neutral"
which(afinn_OSD$sentiment == "neutral")
afinn_OSD[which(afinn_OSD$sentiment == "neutral"),
]
afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
P + N + O
abs(P - N)
(P + N + O)
PD <- (abs(P - N) / (P + N + O))*100
PD
afinn_OSD
afinn_OSD <- afinn_OSD %>%
rename(No_of_text_record=n)
afinn_OSD
afinn_OSD
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
PD <- (abs(P - N) / (P + N + O))*100
total_n <- sum(afinn_OSD$n)
afinn_OSD <- afinn_OSD %>%
rename(No_of_text_record=n)
opi_details$sentiments <- afinn_OSD
opi_details$opiscore <- paste(PD, "%", sep="")
opi_details$metric <- "Proportional Difference"
opi_details$equation <- "(abs(#Positive - #Negative)/(#Positive + #Negative + #neutral))*100"
opi_details
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
PD <- round((abs(P - N) / (P + N + O))*100,digits = 2)
total_n <- sum(afinn_OSD$n)
afinn_OSD <- afinn_OSD %>%
rename(No_of_text_record=n)
opi_details$sentiments <- afinn_OSD
opi_details$opiscore <- paste(PD, "%", sep="")
opi_details$metric <- "Proportional Difference"
opi_details$equation <- "(abs(#Positive - #Negative)/(#Positive + #Negative + #neutral))*100"
opi_details
both_tokens
P
(P / (P + N + O))
round((P / (P + N + O))*100, digits = 2)
FUN = P + N + O
FUN
P + N + O
FUN = "P + N + O"
paste('(abs(#Positive - #Negative)/',
'(#Positive + #Negative + #neutral))*100%"')
paste('(abs(#Positive - #Negative)/',
'(#Positive + #Negative + #neutral))*100%"',
sep="")
paste('(abs(#Positive - #Negative)',
'(#Positive + #Negative + #neutral))*100%"',
sep="/")
paste('(abs(#Positive - #Negative)',
'(#Positive + #Negative + #neutral))*100%',
sep="/")
paste('((#Positive - #Negative)',
'(#Positive + #Negative))*100%',
sep="/")
addfive <- function(P, N, O){
a=P+N+O
return(a)
}
FUN
FUN=NULL
is.null(FUN)
FUN=addfive
FUN
metric == 5 & is.null(FUN)
metric=1
metric == 5 & is.null(FUN)
print(paste("Warning: FUN argument will not be used!!",
"Otherwise `metric = 5`", sep=" "))
opi_details <- list()
textdoc <- data.frame(textdoc[,1])
colnames(textdoc) <- "text"
#head(textdoc)
#create the id
textdoc$ID <- seq.int(nrow(textdoc))
#handle sentiment words preceded by negation words
token_neg_pre <- as_tibble(textdoc) %>%
#unnest_tokens
unnest_tokens(bigram, text, token = "ngrams", n = 2)%>%
separate(bigram, c("word1", "word2"), sep = " ")%>%
as.data.frame() %>%
#get only words preceded by the 'negation' word
dplyr::filter(word1 %in% c("not", "never", "no", "without")) %>%
#get sentiment score
dplyr::mutate(neg = paste(word1, word2, sep=" ")) %>%
dplyr::rename(word  = word2)%>%
left_join(get_sentiments("afinn")) %>% #
dplyr::select(ID, neg, value)%>%
#reverse the score (and multiply by 2)
dplyr::mutate(value2 = value * 2)%>%
dplyr::mutate(value = value2)%>%
dplyr::select(-c(value2))%>%
dplyr::rename(word=neg)%>%
dplyr::filter(!is.na(value))
#handle all others
token_regular <- textdoc %>%
#handle regular words
unnest_tokens(word, text, drop = FALSE) %>%
#join to the lexicon
inner_join(get_sentiments("afinn")) %>%
dplyr::select(-c(text))#drop text
#join both tables
both_tokens <- data.frame(rbind(token_regular, token_neg_pre))
both_tokens
metric == 5
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
FUN
P
userfun <- FUN
N
O
userfun <- FUN
userfun
FUN
FUN(P, N, O)
userfun <- FUN(P, N, O)
userfun
FUN
as.numeric(FUN(P, N, O))
userfun <- as.numeric(FUN(P, N, O))
total_n <- sum(afinn_OSD$n)
afinn_OSD
afinn_OSD
afinn_OSD
opi_details <- list()
textdoc <- data.frame(textdoc[,1])
colnames(textdoc) <- "text"
#head(textdoc)
#create the id
textdoc$ID <- seq.int(nrow(textdoc))
#handle sentiment words preceded by negation words
token_neg_pre <- as_tibble(textdoc) %>%
#unnest_tokens
unnest_tokens(bigram, text, token = "ngrams", n = 2)%>%
separate(bigram, c("word1", "word2"), sep = " ")%>%
as.data.frame() %>%
#get only words preceded by the 'negation' word
dplyr::filter(word1 %in% c("not", "never", "no", "without")) %>%
#get sentiment score
dplyr::mutate(neg = paste(word1, word2, sep=" ")) %>%
dplyr::rename(word  = word2)%>%
left_join(get_sentiments("afinn")) %>% #
dplyr::select(ID, neg, value)%>%
#reverse the score (and multiply by 2)
dplyr::mutate(value2 = value * 2)%>%
dplyr::mutate(value = value2)%>%
dplyr::select(-c(value2))%>%
dplyr::rename(word=neg)%>%
dplyr::filter(!is.na(value))
#handle all others
token_regular <- textdoc %>%
#handle regular words
unnest_tokens(word, text, drop = FALSE) %>%
#join to the lexicon
inner_join(get_sentiments("afinn")) %>%
dplyr::select(-c(text))#drop text
#join both tables
both_tokens <- data.frame(rbind(token_regular, token_neg_pre))
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
userfun <- as.numeric(FUN(P, N, O))
total_n <- sum(afinn_OSD$n)
afinn_OSD
opi_details <- list()
textdoc <- data.frame(textdoc[,1])
colnames(textdoc) <- "text"
#head(textdoc)
#create the id
textdoc$ID <- seq.int(nrow(textdoc))
#handle sentiment words preceded by negation words
token_neg_pre <- as_tibble(textdoc) %>%
#unnest_tokens
unnest_tokens(bigram, text, token = "ngrams", n = 2)%>%
separate(bigram, c("word1", "word2"), sep = " ")%>%
as.data.frame() %>%
#get only words preceded by the 'negation' word
dplyr::filter(word1 %in% c("not", "never", "no", "without")) %>%
#get sentiment score
dplyr::mutate(neg = paste(word1, word2, sep=" ")) %>%
dplyr::rename(word  = word2)%>%
left_join(get_sentiments("afinn")) %>% #
dplyr::select(ID, neg, value)%>%
#reverse the score (and multiply by 2)
dplyr::mutate(value2 = value * 2)%>%
dplyr::mutate(value = value2)%>%
dplyr::select(-c(value2))%>%
dplyr::rename(word=neg)%>%
dplyr::filter(!is.na(value))
#handle all others
token_regular <- textdoc %>%
#handle regular words
unnest_tokens(word, text, drop = FALSE) %>%
#join to the lexicon
inner_join(get_sentiments("afinn")) %>%
dplyr::select(-c(text))#drop text
#join both tables
both_tokens <- data.frame(rbind(token_regular, token_neg_pre))
both_tokens
afinn_OSD <- both_tokens %>%
dplyr::group_by(ID)%>%
dplyr::summarise(sentiment_score = sum(value))%>%
#retain neutral
#dplyr::filter(sentiment_score != 0) %>%
dplyr::mutate(sentiment = if_else(sentiment_score > 0,
"positive",
if_else(sentiment_score < 0, "negative",
"neutral")))%>%
dplyr::select(-c(sentiment_score))%>%
ungroup %>%
#count the proportion of +ve and -ve text records
count(sentiment)
#to ensure that each value exist
sent_gr <- data.frame(sentiment=c("negative", "positive", "neutral"),
n=0)
wh <- sent_gr$sentiment %in% afinn_OSD$sentiment
afinn_OSD <- afinn_OSD %>%
bind_rows(sent_gr[which(wh==FALSE),])
afinn_OSD
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
userfun <- as.numeric(FUN(P, N, O))
userfun
total_n <- sum(afinn_OSD$n)
total_n
afinn_OSD <- afinn_OSD %>%
rename(No_of_text_record=n)
afinn_OSD
userfun
afinn_OSD
P <- afinn_OSD[which(afinn_OSD$sentiment == "positive"),2]
N <- afinn_OSD[which(afinn_OSD$sentiment == "negative"),2]
O <- afinn_OSD[which(afinn_OSD$sentiment == "neutral"),2]
userfun <- as.numeric(FUN(P, N, O))
total_n <- sum(afinn_OSD$n)
afinn_OSD <- afinn_OSD %>%
rename(No_of_text_records=n)
opi_details$sentiments <- afinn_OSD
opi_details$opiscore <- userfun
opi_details$metric <- "User-defined"
opi_details$equation <- FUN
opi_details
library(roxygen2)
library(roxygen2)
